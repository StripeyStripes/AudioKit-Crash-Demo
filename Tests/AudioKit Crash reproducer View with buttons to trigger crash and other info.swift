//
//  ContentView.swift
//  AudioKit Crash reproducer
//
//  Created on 12/31/23.
//

import SwiftUI
import AudioKit
import CoreMIDI
import os.log
import AVFoundation

struct ContentView: View {
    @State var testMidiListener : TestMinimalMidiListener = TestMinimalMidiListener()
    @State var lengthCounter : Int = 255
    var body: some View {
        VStack {
            Image(systemName: "globe")
                .imageScale(.large)
                .foregroundStyle(.tint)
            Text("AudioKit long MIDI message crash report")
            
            let minimalProblematicMessage : [UInt8] = [0xB0, 0x0C, 0x00, 0x00, 0x2C, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x2C, 0x04, 0x00, 0x0C, 0x00, 0x00, 0x2C, 0x04, 0x00, 0x0C, 0x00, 0x00, 0x2C, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x2C, 0x07, 0x00, 0x0C, 0x00, 0x00, 0x2C, 0x02, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x0C, 0x01, 0x00, 0x2C, 0x03, 0x00, 0x0C, 0x01, 0x00, 0x2C, 0x04, 0x00, 0x0C, 0x01, 0x00, 0x2C, 0x04, 0x00, 0x0C, 0x01, 0x00, 0x2C, 0x01, 0x00, 0x0C, 0x01, 0x00, 0x2C, 0x07, 0x00, 0x0C, 0x01, 0x00, 0x2C, 0x02, 0x00, 0x01, 0x00, 0x00, 0x21, 0x00, 0x00, 0x0C, 0x02, 0x00, 0x2C, 0x03, 0x00, 0x0C, 0x02, 0x00, 0x2C, 0x04, 0x00, 0x0C, 0x02, 0x00, 0x2C, 0x04, 0x00, 0x0C, 0x02, 0x00, 0x2C, 0x01, 0x00, 0x0C, 0x02, 0x00, 0x2C, 0x07, 0x00, 0x0C, 0x02, 0x00, 0x2C, 0x02, 0x00, 0x02, 0x00, 0x00, 0x22, 0x00, 0x00, 0x0C, 0x03, 0x00, 0x2C, 0x03, 0x00, 0x0C, 0x03, 0x00, 0x2C, 0x04, 0x00, 0x0C, 0x03, 0x00, 0x2C, 0x04, 0x00, 0x0C, 0x03, 0x00, 0x2C, 0x01, 0x00, 0x0C, 0x03, 0x00, 0x2C, 0x07, 0x00, 0x0C, 0x03, 0x00, 0x2C, 0x02, 0x00, 0x03, 0x00, 0x00, 0x23, 0x00, 0x00, 0x0C, 0x04, 0x00, 0x2C, 0x03, 0x00, 0x0C, 0x04, 0x00, 0x2C, 0x04, 0x00, 0x0C, 0x04, 0x00, 0x2C, 0x04, 0x00, 0x0C, 0x04, 0x00, 0x2C, 0x01, 0x00, 0x0C, 0x04, 0x00, 0x2C, 0x07, 0x00, 0x0C, 0x04, 0x00, 0x2C, 0x02, 0x00, 0x04, 0x00, 0x00, 0x24, 0x00, 0x00, 0x0C, 0x05, 0x00, 0x2C, 0x03, 0x00, 0x0C, 0x05, 0x00, 0x2C, 0x04, 0x00, 0x0C, 0x05, 0x00, 0x2C, 0x04, 0x00, 0x0C, 0x05, 0x00, 0x2C, 0x01, 0x00, 0x0C, 0x05, 0x00, 0x2C, 0x07, 0x00, 0x0C, 0x05, 0x00, 0x2C, 0x02, 0x00, 0x05, 0x00, 0x00, 0x25, 0x00, 0x00, 0x0C, 0x06, 0x00, 0x2C, 0x03, 0x00, 0x0C, 0x06]
            Button("test crash", action: {
                testMidiListener.midi.sendMessage(minimalProblematicMessage)
            })
            Button("test fix", action: {
                testMidiListener.midi.sendMessagePossibleFix(minimalProblematicMessage)
            })
            
            let zeroedEquavalentLengthMessage : [UInt8] = [0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
            Button("test message of same length which does not cause crash", action: {
                testMidiListener.midi.sendMessage(zeroedEquavalentLengthMessage)
            })
            
        }
        .padding()
    }
}
extension MIDI{
    public func sendMessagePossibleFix(_ data: [MIDIByte],
                            time: MIDITimeStamp = mach_absolute_time(),
                            endpointsUIDs: [MIDIUniqueID]? = nil,
                            virtualOutputPorts: [MIDIPortRef]? = nil) {
        let packetListPointer: UnsafeMutablePointer<MIDIPacketList> = UnsafeMutablePointer.allocate(capacity: data.count)

        var packet: UnsafeMutablePointer<MIDIPacket> = MIDIPacketListInit(packetListPointer)
        packet = MIDIPacketListAdd(packetListPointer, 1_024, packet, time, data.count, data)

        var endpointsRef: [MIDIEndpointRef] = []

        if let endpointsUIDS = endpointsUIDs {
            for endpointUID in endpointsUIDS {
                if let endpoint = endpoints[endpointUID] {endpointsRef.append(endpoint)}
            }
        } else {
            endpointsRef = Array(endpoints.values)
        }

        for endpoint in endpointsRef {
            let result = MIDISend(outputPort, endpoint, packetListPointer)
            if result != noErr {
                Log("error sending midi: \(result)", log: OSLog.midi, type: .error)
            }
        }

        if virtualOutputs != [0] {
            virtualOutputPorts?.forEach {MIDIReceived($0, packetListPointer)}
        }

        packetListPointer.deallocate()
    }
}
#Preview {
    ContentView(testMidiListener: TestMinimalMidiListener())
}
class TestMinimalMidiListener : MIDIListener{
    let midi = MIDI()
    func receivedMIDINoteOn(noteNumber: AudioKit.MIDINoteNumber, velocity: AudioKit.MIDIVelocity, channel: AudioKit.MIDIChannel, portID: MIDIUniqueID?, timeStamp: MIDITimeStamp?)  { print("not applicable")}
    func receivedMIDINoteOff(noteNumber: AudioKit.MIDINoteNumber, velocity: AudioKit.MIDIVelocity, channel: AudioKit.MIDIChannel, portID: MIDIUniqueID?, timeStamp: MIDITimeStamp?) { print("not applicable")}
    func receivedMIDIController(_ controller: AudioKit.MIDIByte, value: AudioKit.MIDIByte, channel: AudioKit.MIDIChannel, portID: MIDIUniqueID?, timeStamp: MIDITimeStamp?)         { print("not applicable")}
    func receivedMIDIAftertouch(noteNumber: AudioKit.MIDINoteNumber, pressure: AudioKit.MIDIByte, channel: AudioKit.MIDIChannel, portID: MIDIUniqueID?, timeStamp: MIDITimeStamp?)  { print("not applicable")}
    func receivedMIDIAftertouch(_ pressure: AudioKit.MIDIByte, channel: AudioKit.MIDIChannel, portID: MIDIUniqueID?, timeStamp: MIDITimeStamp?)                                     { print("not applicable")}
    func receivedMIDIPitchWheel(_ pitchWheelValue: AudioKit.MIDIWord, channel: AudioKit.MIDIChannel, portID: MIDIUniqueID?, timeStamp: MIDITimeStamp?)                              { print("not applicable")}
    func receivedMIDIProgramChange(_ program: AudioKit.MIDIByte, channel: AudioKit.MIDIChannel, portID: MIDIUniqueID?, timeStamp: MIDITimeStamp?)                                   { print("not applicable")}
    func receivedMIDISystemCommand(_ data: [AudioKit.MIDIByte], portID: MIDIUniqueID?, timeStamp: MIDITimeStamp?)                                                                   { print("not applicable")}
    func receivedMIDISetupChange()                                                                                                                                                  { print("not applicable")}
    func receivedMIDIPropertyChange(propertyChangeInfo: MIDIObjectPropertyChangeNotification)                                                                                       { print("not applicable")}
    func receivedMIDINotification(notification: MIDINotification)                                                                                                                   { print("not applicable")}
}



/* original message (the first 261 elements suffice to cause the crash) */
//let problematicMessage : [UInt8] = [0xB0 , 0x0C , 0x00 , 0x00 , 0x2C , 0x03 , 0x00 , 0x0C , 0x00 , 0x00 , 0x2C , 0x04 , 0x00 , 0x0C , 0x00 , 0x00 , 0x2C , 0x04 , 0x00 , 0x0C , 0x00 , 0x00 , 0x2C , 0x01 , 0x00 , 0x0C , 0x00 , 0x00 , 0x2C , 0x07 , 0x00 , 0x0C , 0x00 , 0x00 , 0x2C , 0x02 , 0x00 , 0x00 , 0x00 , 0x00 , 0x20 , 0x00 , 0x00 , 0x0C , 0x01 , 0x00 , 0x2C , 0x03 , 0x00 , 0x0C , 0x01 , 0x00 , 0x2C , 0x04 , 0x00 , 0x0C , 0x01 , 0x00 , 0x2C , 0x04 , 0x00 , 0x0C , 0x01 , 0x00 , 0x2C , 0x01 , 0x00 , 0x0C , 0x01 , 0x00 , 0x2C , 0x07 , 0x00 , 0x0C , 0x01 , 0x00 , 0x2C , 0x02 , 0x00 , 0x01 , 0x00 , 0x00 , 0x21 , 0x00 , 0x00 , 0x0C , 0x02 , 0x00 , 0x2C , 0x03 , 0x00 , 0x0C , 0x02 , 0x00 , 0x2C , 0x04 , 0x00 , 0x0C , 0x02 , 0x00 , 0x2C , 0x04 , 0x00 , 0x0C , 0x02 , 0x00 , 0x2C , 0x01 , 0x00 , 0x0C , 0x02 , 0x00 , 0x2C , 0x07 , 0x00 , 0x0C , 0x02 , 0x00 , 0x2C , 0x02 , 0x00 , 0x02 , 0x00 , 0x00 , 0x22 , 0x00 , 0x00 , 0x0C , 0x03 , 0x00 , 0x2C , 0x03 , 0x00 , 0x0C , 0x03 , 0x00 , 0x2C , 0x04 , 0x00 , 0x0C , 0x03 , 0x00 , 0x2C , 0x04 , 0x00 , 0x0C , 0x03 , 0x00 , 0x2C , 0x01 , 0x00 , 0x0C , 0x03 , 0x00 , 0x2C , 0x07 , 0x00 , 0x0C , 0x03 , 0x00 , 0x2C , 0x02 , 0x00 , 0x03 , 0x00 , 0x00 , 0x23 , 0x00 , 0x00 , 0x0C , 0x04 , 0x00 , 0x2C , 0x03 , 0x00 , 0x0C , 0x04 , 0x00 , 0x2C , 0x04 , 0x00 , 0x0C , 0x04 , 0x00 , 0x2C , 0x04 , 0x00 , 0x0C , 0x04 , 0x00 , 0x2C , 0x01 , 0x00 , 0x0C , 0x04 , 0x00 , 0x2C , 0x07 , 0x00 , 0x0C , 0x04 , 0x00 , 0x2C , 0x02 , 0x00 , 0x04 , 0x00 , 0x00 , 0x24 , 0x00 , 0x00 , 0x0C , 0x05 , 0x00 , 0x2C , 0x03 , 0x00 , 0x0C , 0x05 , 0x00 , 0x2C , 0x04 , 0x00 , 0x0C , 0x05 , 0x00 , 0x2C , 0x04 , 0x00 , 0x0C , 0x05 , 0x00 , 0x2C , 0x01 , 0x00 , 0x0C , 0x05 , 0x00 , 0x2C , 0x07 , 0x00 , 0x0C , 0x05 , 0x00 , 0x2C , 0x02 , 0x00 , 0x05 , 0x00 , 0x00 , 0x25 , 0x00 , 0x00 , 0x0C , 0x06 , 0x00 , 0x2C , 0x03 , 0x00 , 0x0C , 0x06 , 0x00 , 0x2C , 0x04 , 0x00 , 0x0C , 0x06 , 0x00 , 0x2C , 0x04 , 0x00 , 0x0C , 0x06 , 0x00 , 0x2C , 0x01 , 0x00 , 0x0C , 0x06 , 0x00 , 0x2C , 0x07 , 0x00 , 0x0C , 0x06 , 0x00 , 0x2C , 0x02 , 0x00 , 0x06 , 0x00 , 0x00 , 0x26 , 0x00 , 0x00 , 0x0C , 0x07 , 0x00 , 0x2C , 0x03 , 0x00 , 0x0C , 0x07 , 0x00 , 0x2C , 0x04 , 0x00 , 0x0C , 0x07 , 0x00 , 0x2C , 0x04 , 0x00 , 0x0C , 0x07 , 0x00 , 0x2C , 0x01 , 0x00 , 0x0C , 0x07 , 0x00 , 0x2C , 0x07 , 0x00 , 0x0C , 0x07 , 0x00 , 0x2C , 0x02 , 0x00 , 0x07 , 0x00 , 0x00 , 0x27 , 0x00 , 0x00]

/* also does not cause crash */
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
